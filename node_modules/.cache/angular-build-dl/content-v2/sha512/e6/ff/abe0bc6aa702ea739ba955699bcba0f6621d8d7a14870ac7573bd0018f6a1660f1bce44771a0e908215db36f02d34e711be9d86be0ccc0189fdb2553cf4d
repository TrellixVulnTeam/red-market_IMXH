{"version":3,"sources":["webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.page.html","webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.page.ts","webpack:///src/app/firebase/auth/sign-up/firebase-sign-up.module.ts","webpack:///src/app/validators/password.validator.ts"],"names":["FirebaseSignUpPage","router","route","menu","authService","ngZone","loadingController","location","db","validation_messages","type","message","matching_passwords_group","compose","minLength","required","formGroup","areNotEqual","signupForm","pattern","authRedirectResult","getRedirectResult","subscribe","result","error","manageAuthWithProvidersErrors","redirectLoggedUserToProfilePage","queryParams","params","authProvider","presentLoading","enable","data","mode","checkFirstTimeUser","dismissLoading","run","previousUrl","navigate","replaceUrl","authProviderCapitalized","toUpperCase","slice","create","duration","redirectLoader","present","dismiss","submitError","go","path","getState","errorMessage","replaceState","url","split","resetSubmitError","values","value","signUpWithEmail","email","matching_passwords","password","then","user","prepareForAuthWithProvidersRedirection","signInWithFacebook","console","log","JSON","stringify","signInWithGoogle","signInWithTwitter","info","provider","profileImg","photoURL","replace","doc","uid","get","docSnapshot","exists","set","name","displayName","role","img","created","FieldValue","serverTimestamp","signIn","doFacebookSignup","doGoogleSignup","doTwitterSignup","routes","component","FirebaseSignUpPageModule","forChild","PasswordValidator","firstControlValue","valid","key","controls","hasOwnProperty","control","undefined"],"mappings":"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","file":"default~app-firebase-auth-sign-up-firebase-sign-up-module~sign-up-firebase-sign-up-module-es5.js","sourcesContent":["<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button></ion-back-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"signup-content\">\n  <h2 class=\"auth-title\">\n    Sign Up with Firebase\n  </h2>\n  <form [formGroup]=\"signupForm\" (ngSubmit)=\"signUpWithEmail()\">\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-item class=\"input-item\">\n        <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.email\">\n          <div class=\"error-message\" *ngIf=\"signupForm.get('email').hasError(validation.type) && (signupForm.get('email').dirty || signupForm.get('email').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <div formGroupName=\"matching_passwords\">\n        <ion-item class=\"input-item\">\n          <app-show-hide-password>\n            <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n          </app-show-hide-password>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validation_messages.password\">\n            <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').get('password').hasError(validation.type) && (signupForm.get('matching_passwords').get('password').dirty || signupForm.get('matching_passwords').get('password').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n\n        <ion-item class=\"input-item\">\n          <app-show-hide-password>\n            <ion-input type=\"password\" placeholder=\"Confirm Password\" formControlName=\"confirm_password\"></ion-input>\n          </app-show-hide-password>\n        </ion-item>\n        <div class=\"error-container\">\n          <ng-container *ngFor=\"let validation of validation_messages.confirm_password\">\n            <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').get('confirm_password').hasError(validation.type) && (signupForm.get('matching_passwords').get('confirm_password').dirty || signupForm.get('matching_passwords').get('confirm_password').touched)\">\n              <ion-icon name=\"information-circle-outline\"></ion-icon>\n              <span>{{ validation.message }}</span>\n            </div>\n          </ng-container>\n        </div>\n      </div>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.matching_passwords\">\n          <div class=\"error-message\" *ngIf=\"signupForm.get('matching_passwords').hasError(validation.type) && (signupForm.get('matching_passwords').get('confirm_password').dirty || signupForm.get('matching_passwords').get('confirm_password').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-button class=\"signup-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!signupForm.valid\">Sign Up</ion-button>\n    <div class=\"error-container\" *ngIf=\"submitError\">\n      <div class=\"error-message\">\n        <ion-icon name=\"information-circle-outline\"></ion-icon>\n        <span>{{ submitError }}</span>\n      </div>\n    </div>\n    <ion-row class=\"other-auth-options-row\">\n      <ion-button class=\"login-btn\" fill=\"clear\" (click)=\"signIn()\">\n        Already have an account?\n      </ion-button>\n    </ion-row>\n  </form>\n\n  <div class=\"social-auth-options\">\n    <p class=\"options-divider\">Or</p>\n    <ion-button class=\"social-auth-btn facebook-auth-btn\" expand=\"block\" color=\"facebook\" (click)=\"doFacebookSignup()\">Sign Up with Facebook</ion-button>\n    <ion-button class=\"social-auth-btn google-auth-btn\" expand=\"block\" color=\"google\" (click)=\"doGoogleSignup()\">Sign Up with Google</ion-button>\n    <ion-button class=\"social-auth-btn twitter-auth-btn\" expand=\"block\" color=\"twitter\" (click)=\"doTwitterSignup()\">Sign Up with Twitter</ion-button>\n  </div>\n</ion-content>\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { Location } from '@angular/common';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MenuController, LoadingController } from '@ionic/angular';\nimport { PasswordValidator } from '../../../validators/password.validator';\nimport { FirebaseAuthService } from '../firebase-auth.service';\nimport { Subscription } from 'rxjs';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport * as firebase from \"firebase/app\";\nimport { Console } from 'node:console';\n\n@Component({\n  selector: 'app-firebase-sign-up',\n  templateUrl: './firebase-sign-up.page.html',\n  styleUrls: [\n    './styles/firebase-sign-up.page.scss'\n  ]\n})\nexport class FirebaseSignUpPage implements OnInit {\n  signupForm: FormGroup;\n  matching_passwords_group: FormGroup;\n  submitError: string;\n  redirectLoader: HTMLIonLoadingElement;\n  authRedirectResult: Subscription;\n\n  validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required' }\n    ],\n    'matching_passwords': [\n      { type: 'areNotEqual', message: 'Password mismatch' }\n    ]\n  };\n\n  constructor(\n    public router: Router,\n    public route: ActivatedRoute,\n    public menu: MenuController,\n    public authService: FirebaseAuthService,\n    private ngZone: NgZone,\n    public loadingController: LoadingController,\n    public location: Location,\n    private db: AngularFirestore,\n  ) {\n    this.matching_passwords_group = new FormGroup({\n      'password': new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ])),\n      'confirm_password': new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areNotEqual(formGroup);\n    });\n\n    this.signupForm = new FormGroup({\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      'matching_passwords': this.matching_passwords_group\n    });\n\n    // Get firebase authentication redirect result invoken when using signInWithRedirect()\n    // signInWithRedirect() is only used when client is in web but not desktop\n    this.authRedirectResult = this.authService.getRedirectResult()\n    .subscribe(result => {\n      if (result.error) {\n        this.manageAuthWithProvidersErrors(result.error);\n      } else {\n        //this.checkFirstTimeUser(result)\n        this.redirectLoggedUserToProfilePage(result,'');\n      }\n    });\n\n    // Check if url contains our custom 'auth-redirect' param, then show a loader while we receive the getRedirectResult notification\n    this.route.queryParams.subscribe(params => {\n      const authProvider = params['auth-redirect'];\n      if (authProvider) {\n        this.presentLoading(authProvider);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.menu.enable(false);\n  }\n\n  // Once the auth provider finished the authentication flow, and the auth redirect completes,\n  // hide the loader and redirect the user to the profile page\n  redirectLoggedUserToProfilePage(data,mode) {\n   this.checkFirstTimeUser(data,mode);\n    this.dismissLoading();\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\n    this.ngZone.run(() => {\n      // Get previous URL from our custom History Helper\n      // If there's no previous page, then redirect to profile\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\n      const previousUrl = 'redmarket/profile/user';\n\n      // No need to store in the navigation history the sign-in page with redirect params (it's justa a mandatory mid-step)\n      // Navigate to profile and replace current url with profile\n      this.router.navigate([previousUrl], { replaceUrl: true });\n    });\n  }\n\n\n\n  async presentLoading(authProvider?: string) {\n    const authProviderCapitalized = authProvider[0].toUpperCase() + authProvider.slice(1);\n    this.redirectLoader = await this.loadingController.create({\n      message: authProvider ? 'Signing up with ' + authProviderCapitalized : 'Signin up ...',\n      duration: 4000\n    });\n    await this.redirectLoader.present();\n  }\n\n  async dismissLoading() {\n    if (this.redirectLoader) {\n      await this.redirectLoader.dismiss();\n    }\n  }\n\n  resetSubmitError() {\n    this.submitError = null;\n  }\n\n  // Before invoking auth provider redirect flow, present a loading indicator and add a flag to the path.\n  // The precense of the flag in the path indicates we should wait for the auth redirect to complete.\n  prepareForAuthWithProvidersRedirection(authProvider: string) {\n    this.presentLoading(authProvider);\n    this.location.go(this.location.path(), 'auth-redirect=' + authProvider, this.location.getState());\n  }\n\n  manageAuthWithProvidersErrors(errorMessage: string) {\n    this.submitError = errorMessage;\n    // remove auth-redirect param from url\n    this.location.replaceState(this.router.url.split('?')[0], '');\n    this.dismissLoading();\n  }\n\n  signUpWithEmail(): void {\n    this.resetSubmitError();\n    const values = this.signupForm.value;\n    this.authService.signUpWithEmail(values.email, values.matching_passwords.password)\n      .then(user => {\n        // navigate to user profile\n        this.redirectLoggedUserToProfilePage(user,'');\n      })\n      .catch(error => {\n        this.submitError = error.message;\n      });\n  }\n\n  doFacebookSignup(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('facebook');\n\n    this.authService.signInWithFacebook()\n    .subscribe((result) => {\n      console.log(\"FACEBOOK USER +++++ \"+JSON.stringify(result));\n      this.checkFirstTimeUser(result,'facebook');\n \n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      // const token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage(result,'facebook');\n    }, (error) => {\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  doGoogleSignup(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('google');\n\n    this.authService.signInWithGoogle()\n    .subscribe((result) => {\n      console.log(\"GOOGLE USER ++++++ \");\n      this.checkFirstTimeUser(result,'google');\n\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      // var token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage(result,'google');\n    }, (error) => {\n        console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  doTwitterSignup(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('twitter');\n\n    this.authService.signInWithTwitter()\n    .subscribe((result) => {\n      // This gives you a Twitter Access Token. You can use it to access the Twitter API.\n      // var token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage(result,'');\n    }, (error) => {\n      console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  signIn(){\n    this.router.navigate([\"/redmarket/profile/auth/sign-in\"], { replaceUrl: true });\n  }\n\n\n  async checkFirstTimeUser(info,provider){\n    let profileImg = info.photoURL;\n    if(provider==='google'){\n      profileImg = profileImg.replace('s96-c', 's500-c');\n    }\n    if(provider==='facebook'){\n      profileImg = info.photoURL+'/?width=450&height=450';\n    }\n   this.db.doc(`users/${info.uid}`).get().subscribe\n   ((docSnapshot) => {\n     if (docSnapshot.exists) {\n      console.log('user exist already ! ');\n     } else {\n       this.db.doc(`users/${info.uid}`).set({\n         name: info.displayName,\n         email: info.email,\n         role: \"user\",\n         img: profileImg,\n         created: firebase.firestore.FieldValue.serverTimestamp(),\n       });\n     }\n });\n }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\nimport { FirebaseSignUpPage } from './firebase-sign-up.page';\nimport { ComponentsModule } from '../../../components/components.module';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FirebaseSignUpPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule\n  ],\n  declarations: [FirebaseSignUpPage]\n})\nexport class FirebaseSignUpPageModule {}\n","import { FormControl, FormGroup } from '@angular/forms';\n\nexport class PasswordValidator {\n\n  // If our validation fails, we return an object with a key for the error name and a value of true.\n  // Otherwise, if the validation passes, we simply return null because there is no error.\n\n  static areNotEqual(formGroup: FormGroup) {\n    let firstControlValue: any;\n    let valid = true;\n\n    for (const key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        const control: FormControl = <FormControl>formGroup.controls[key];\n\n        if (firstControlValue === undefined) {\n          firstControlValue = control.value;\n        } else {\n          // check if the value of the first control is equal to the value of the second control\n          if (firstControlValue !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areNotEqual: true\n    };\n  }\n}\n"]}