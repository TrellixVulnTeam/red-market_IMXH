{"version":3,"sources":["webpack:///node_modules/@angular/fire/__ivy_ngcc__/fesm2015/angular-fire-auth-guard.js","webpack:///src/app/firebase/auth/sign-in/firebase-sign-in.page.html","webpack:///src/app/firebase/auth/sign-in/firebase-sign-in.page.ts"],"names":["ɵ0","user","loggedIn","AngularFireAuthGuard","router","auth","canActivate","next","state","authPipeFactory","data","authGuardPipe","pipe","can","Array","isArray","createUrlTree","parseUrl","ɵfac","AngularFireAuthGuard_Factory","t","ctorParameters","type","ɵprov","factory","token","providedIn","ngDevMode","args","ɵ1","isAnonymous","isNotAnonymous","ɵ2","getIdTokenResult","idTokenResult","ɵ3","emailVerified","ɵ4","claims","customClaims","hasCustomClaim","claim","hasOwnProperty","redirectUnauthorizedTo","redirect","redirectLoggedInTo","AngularFireAuthGuardModule","ɵmod","ɵinj","AngularFireAuthGuardModule_Factory","providers","FirebaseSignInPage","route","authService","ngZone","loadingController","location","historyHelper","validation_messages","message","loginForm","compose","required","pattern","minLength","authRedirectResult","getRedirectResult","subscribe","result","error","manageAuthWithProvidersErrors","redirectLoggedUserToProfilePage","queryParams","params","authProvider","presentLoading","dismissLoading","run","previousUrl","navigate","replaceUrl","authProviderCapitalized","toUpperCase","slice","create","duration","then","loader","currentUrl","path","includes","redirectLoader","present","dismiss","replaceState","getState","errorMessage","submitError","url","split","resetSubmitError","signInWithEmail","value","prepareForAuthWithProvidersRedirection","signInWithFacebook","signInWithGoogle","console","log","signInWithTwitter","doFacebookLogin","doGoogleLogin","doTwitterLogin"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;;;AAIA,UAAMA,EAAE;AAAG;AACX;AACA;AACA;AACA,eAJMA,EAIN,CAAAC,IAAI;AAAA,eAAI,CAAC,CAACA,IAAN;AAAA,OAJJ;AAKA;;;AACA,UAAMC,QAAQ,GAAG,2DAAKF,EAAL,CAAjB;;UACMG,oB;AACF;AACJ;AACA;AACA;AACI,oCAAYC,MAAZ,EAAoBC,IAApB,EAA0B;AAAA;;AAAA;;AACtB,aAAKD,MAAL,GAAcA,MAAd;AACA,aAAKC,IAAL,GAAYA,IAAZ;;AACA,aAAKC,WAAL;AAAoB;AAC5B;AACA;AACA;AACA;AACQ,kBAACC,IAAD,EAAOC,KAAP,EAAiB;AACb;AACA,cAAMC,eAAe;AAAI;AAAkBF,cAAI,CAACG,IAAL,CAAUC,aAA7B;AAAkD;AACtF;AACA;AACY;AAAA,mBAAMT,QAAN;AAAA,WAHA;;AAIA,iBAAO,KAAI,CAACG,IAAL,CAAUJ,IAAV,CAAeW,IAAf,CAAoB,4DAAK,CAAL,CAApB,EAA6BH,eAAe,CAACF,IAAD,EAAOC,KAAP,CAA5C,EAA2D;AAAK;AACnF;AACA;AACA;AACY,oBAAAK,GAAG,EAAI;AACH,gBAAI,OAAOA,GAAP,KAAe,SAAnB,EAA8B;AAC1B,qBAAOA,GAAP;AACH,aAFD,MAGK,IAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACzB,qBAAO,KAAI,CAACT,MAAL,CAAYY,aAAZ,CAA0BH,GAA1B,CAAP;AACH,aAFI,MAGA;AACD;AACA,qBAAO,KAAI,CAACT,MAAL,CAAYa,QAAZ,CAAqBJ,GAArB,CAAP;AACH;AACJ,WAfiE,CAA3D,CAAP;AAgBH,SA3BD;AA4BH,O;;AAELV,0BAAoB,CAACe,IAArB,GAA4B,SAASC,4BAAT,CAAsCC,CAAtC,EAAyC;AAAE,eAAO,KAAKA,CAAC,IAAIjB,oBAAV,EAAgC,uDAAgB,sDAAhB,CAAhC,EAAgE,uDAAgB,kEAAhB,CAAhE,CAAP;AAAkH,OAAzL;AACA;;;AACAA,0BAAoB,CAACkB,cAArB,GAAsC;AAAA,eAAM,CACxC;AAAEC,cAAI,EAAE;AAAR,SADwC,EAExC;AAAEA,cAAI,EAAE;AAAR,SAFwC,CAAN;AAAA,OAAtC;AAIA;;;AAAmBnB,0BAAoB,CAACoB,KAArB,GAA6B,yEAAmB;AAAEC,eAAO,EAAE,SAASL,4BAAT,GAAwC;AAAE,iBAAO,IAAIhB,oBAAJ,CAAyB,+DAAS,sDAAT,CAAzB,EAA2C,+DAAS,kEAAT,CAA3C,CAAP;AAA+E,SAApI;AAAsIsB,aAAK,EAAEtB,oBAA7I;AAAmKuB,kBAAU,EAAE;AAA/K,OAAnB,CAA7B;;AACnB,OAAC,YAAY;AAAE,SAAC,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,gEAAyBxB,oBAAzB,EAA+C,CAAC;AAC1GmB,cAAI,EAAE,wDADoG;AAE1GM,cAAI,EAAE,CAAC;AACCF,sBAAU,EAAE;AADb,WAAD;AAFoG,SAAD,CAA/C,EAK1D,YAAY;AAAE,iBAAO,CAAC;AAAEJ,gBAAI,EAAE;AAAR,WAAD,EAA0B;AAAEA,gBAAI,EAAE;AAAR,WAA1B,CAAP;AAAqE,SALzB,EAK2B,IAL3B,CAAnD;AAKsF,OALrG;;AAMA,UAAI,KAAJ,EAAW,CAaV;AACD;;;AACA,UAAMhB,WAAW;AAAI;AACrB;AACA;AACA;AACA,eAJMA,WAIN,CAACM,IAAD;AAAA,eAAW;AACPN,qBAAW,EAAE,CAACH,oBAAD,CADN;AAC8BO,cAAI,EAAE;AAAEC,yBAAa,EAAEC;AAAjB;AADpC,SAAX;AAAA,OAJA;;AAOA,UAAMiB,EAAE;AAAG;AACX;AACA;AACA;AACA,eAJMA,EAIN,CAAA5B,IAAI;AAAA,eAAI,CAAC,CAACA,IAAF,IAAU,CAACA,IAAI,CAAC6B,WAApB;AAAA,OAJJ;AAKA;;;AACA,UAAMC,cAAc,GAAG,2DAAKF,EAAL,CAAvB;;AACA,UAAMG,EAAE;AAAG;AACX;AACA;AACA;AACA,eAJMA,EAIN,CAAC/B,IAAD;AAAA,eAAUA,IAAI,GAAGA,IAAI,CAACgC,gBAAL,EAAH,GAA6B,gDAAG,IAAH,CAA3C;AAAA,OAJA;AAKA;;;AACA,UAAMC,aAAa,GAAG,iEAAWF,EAAX,CAAtB;;AACA,UAAMG,EAAE;AAAG;AACX;AACA;AACA;AACA,eAJMA,EAIN,CAAAlC,IAAI;AAAA,eAAI,CAAC,CAACA,IAAF,IAAUA,IAAI,CAACmC,aAAnB;AAAA,OAJJ;AAKA;;;AACA,UAAMA,aAAa,GAAG,2DAAKD,EAAL,CAAtB;;AACA,UAAME,EAAE;AAAG;AACX;AACA;AACA;AACA,eAJMA,EAIN,CAAAH,aAAa;AAAA,eAAIA,aAAa,GAAGA,aAAa,CAACI,MAAjB,GAA0B,EAA3C;AAAA,OAJb;AAKA;;;AACA,UAAMC,YAAY,GAAG,kDAAKL,aAAL,EAAoB,2DAAKG,EAAL,CAApB,CAArB;AACA;;AACA,UAAMG,cAAc;AAAI;AACxB;AACA;AACA;AACA,eAJMA,cAIN,CAACC,KAAD;AAAA,eAAW,kDAAKF,YAAL,EAAmB;AAAK;AACnC;AACA;AACA;AACA,kBAAAD,MAAM;AAAA,iBAAIA,MAAM,CAACI,cAAP,CAAsBD,KAAtB,CAAJ;AAAA,SAJwB,CAAnB,CAAX;AAAA,OAJA;AASA;;;AACA,UAAME,sBAAsB;AAAI;AAChC;AACA;AACA;AACA,eAJMA,sBAIN,CAACC,QAAD;AAAA,eAAc,kDAAK1C,QAAL,EAAe;AAAK;AAClC;AACA;AACA;AACA,kBAAAA,QAAQ;AAAA,iBAAIA,QAAQ,IAAI0C,QAAhB;AAAA,SAJqB,CAAf,CAAd;AAAA,OAJA;AASA;;;AACA,UAAMC,kBAAkB;AAAI;AAC5B;AACA;AACA;AACA,eAJMA,kBAIN,CAACD,QAAD;AAAA,eAAc,kDAAK1C,QAAL,EAAe;AAAK;AAClC;AACA;AACA;AACA,kBAAAA,QAAQ;AAAA,iBAAIA,QAAQ,IAAI0C,QAAZ,IAAwB,IAA5B;AAAA,SAJqB,CAAf,CAAd;AAAA,OAJA;AAUA;AACA;AACA;AACA;AACA;;;UACME,0B;;;;AAENA,gCAA0B,CAACC,IAA3B,GAAkC,+DAAwB;AAAEzB,YAAI,EAAEwB;AAAR,OAAxB,CAAlC;AACAA,gCAA0B,CAACE,IAA3B,GAAkC,+DAAwB;AAAExB,eAAO,EAAE,SAASyB,kCAAT,CAA4C7B,CAA5C,EAA+C;AAAE,iBAAO,KAAKA,CAAC,IAAI0B,0BAAV,GAAP;AAAiD,SAA7G;AAA+GI,iBAAS,EAAE,CAAC/C,oBAAD;AAA1H,OAAxB,CAAlC;;AACA,OAAC,YAAY;AAAE,SAAC,OAAOwB,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD,gEAAyBmB,0BAAzB,EAAqD,CAAC;AAChHxB,cAAI,EAAE,sDAD0G;AAEhHM,cAAI,EAAE,CAAC;AACCsB,qBAAS,EAAE,CAAC/C,oBAAD;AADZ,WAAD;AAF0G,SAAD,CAArD,EAK1D,IAL0D,EAKpD,IALoD,CAAnD;AAKO,OALtB;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnKU;;AACE;;AACA;;AAAM;;AAAwB;;AAChC;;;;;;AADQ;;AAAA;;;;;;AAHV;;AACE;;AAIF;;;;;;;;AAJ8B;;AAAA;;;;;;AAc5B;;AACE;;AACA;;AAAM;;AAAwB;;AAChC;;;;;;AADQ;;AAAA;;;;;;AAHV;;AACE;;AAIF;;;;;;;;AAJ8B;;AAAA;;;;;;AASlC;;AACE;;AACE;;AACA;;AAAM;;AAAiB;;AACzB;;AACF;;;;;;AAFU;;AAAA;;;;;;;;UC7BDgD,kB;AAiBX,oCACS/C,MADT,EAESgD,KAFT,EAGSC,WAHT,EAIUC,MAJV,EAKSC,iBALT,EAMSC,QANT,EAOSC,aAPT,EAO4C;AAAA;;AAAA;;AANnC,eAAArD,MAAA,GAAAA,MAAA;AACA,eAAAgD,KAAA,GAAAA,KAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACC,eAAAC,MAAA,GAAAA,MAAA;AACD,eAAAC,iBAAA,GAAAA,iBAAA;AACA,eAAAC,QAAA,GAAAA,QAAA;AACA,eAAAC,aAAA,GAAAA,aAAA;AAlBT,eAAAC,mBAAA,GAAsB;AACpB,qBAAS,CACP;AAAEpC,kBAAI,EAAE,UAAR;AAAoBqC,qBAAO,EAAE;AAA7B,aADO,EAEP;AAAErC,kBAAI,EAAE,SAAR;AAAmBqC,qBAAO,EAAE;AAA5B,aAFO,CADW;AAKpB,wBAAY,CACV;AAAErC,kBAAI,EAAE,UAAR;AAAoBqC,qBAAO,EAAE;AAA7B,aADU,EAEV;AAAErC,kBAAI,EAAE,WAAR;AAAqBqC,qBAAO,EAAE;AAA9B,aAFU;AALQ,WAAtB;AAoBE,eAAKC,SAAL,GAAiB,IAAI,wDAAJ,CAAc;AAC7B,qBAAS,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWC,OAAX,CAAmB,CAC9C,0DAAWC,QADmC,EAE9C,0DAAWC,OAAX,CAAmB,iDAAnB,CAF8C,CAAnB,CAApB,CADoB;AAK7B,wBAAY,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWF,OAAX,CAAmB,CACjD,0DAAWG,SAAX,CAAqB,CAArB,CADiD,EAEjD,0DAAWF,QAFsC,CAAnB,CAApB;AALiB,WAAd,CAAjB,CAF0C,CAY1C;AACA;;AACA,eAAKG,kBAAL,GAA0B,KAAKZ,WAAL,CAAiBa,iBAAjB,GACzBC,SADyB,CACf,UAAAC,MAAM,EAAI;AACnB,gBAAIA,MAAM,CAACC,KAAX,EAAkB;AAChB,oBAAI,CAACC,6BAAL,CAAmCF,MAAM,CAACC,KAA1C;AACD,aAFD,MAEO;AACL,oBAAI,CAACE,+BAAL;AACD;AACJ,WAP2B,CAA1B,CAd0C,CAuB1C;;AACA,eAAKnB,KAAL,CAAWoB,WAAX,CAAuBL,SAAvB,CAAiC,UAAAM,MAAM,EAAI;AACzC,gBAAMC,YAAY,GAAGD,MAAM,CAAC,eAAD,CAA3B;;AACA,gBAAIC,YAAJ,EAAkB;AAChB,oBAAI,CAACC,cAAL,CAAoBD,YAApB;AACD;AACF,WALD;AAMD;;;;iBAED,uBAAW;AACT,iBAAKE,cAAL;AACD,W,CAED;AACA;;;;iBACA,2CAAkC;AAAA;;AAChC,iBAAKA,cAAL,GADgC,CAEhC;AACA;;AACA,iBAAKtB,MAAL,CAAYuB,GAAZ,CAAgB,YAAM;AACpB;AACA;AACA;AACA,kBAAMC,WAAW,GAAG,MAApB,CAJoB,CAMpB;AACA;;AACA,oBAAI,CAAC1E,MAAL,CAAY2E,QAAZ,CAAqB,CAACD,WAAD,CAArB,EAAoC;AAAEE,0BAAU,EAAE;AAAd,eAApC;AACD,aATD;AAUD;;;iBAEK,wBAAeN,YAAf,EAAsC;;;;;;;;;AACpCO,6C,GAA0BP,YAAY,CAAC,CAAD,CAAZ,CAAgBQ,WAAhB,KAAgCR,YAAY,CAACS,KAAb,CAAmB,CAAnB,C;AAEhE,2BAAK5B,iBAAL,CAAuB6B,MAAvB,CAA8B;AAC5BzB,+BAAO,EAAEe,YAAY,GAAG,qBAAqBO,uBAAxB,GAAkD,eAD3C;AAE5BI,gCAAQ,EAAE;AAFkB,uBAA9B,EAGGC,IAHH,CAGQ,UAACC,MAAD,EAAY;AAClB,4BAAMC,UAAU,GAAG,MAAI,CAAChC,QAAL,CAAciC,IAAd,EAAnB;;AACA,4BAAID,UAAU,CAACE,QAAX,CAAoB,eAApB,CAAJ,EAA0C;AACxC,gCAAI,CAACC,cAAL,GAAsBJ,MAAtB;;AACA,gCAAI,CAACI,cAAL,CAAoBC,OAApB;AACD;AACF,uBATD;;;;;;;;;AAUD;;;iBAEK,0BAAiB;;;;;;2BACjB,KAAKD,c;;;;;;AACP,6BAAM,KAAKA,cAAL,CAAoBE,OAApB,EAAN;;;;;;;;;AAEH,W,CAED;AACA;;;;iBACA,gDAAuCnB,YAAvC,EAA6D;AAC3D,iBAAKC,cAAL,CAAoBD,YAApB;AAEA,iBAAKlB,QAAL,CAAcsC,YAAd,CAA2B,KAAKtC,QAAL,CAAciC,IAAd,EAA3B,EAAiD,mBAAmBf,YAApE,EAAkF,KAAKlB,QAAL,CAAcuC,QAAd,EAAlF;AACD;;;iBAED,uCAA8BC,YAA9B,EAAoD;AAClD,iBAAKC,WAAL,GAAmBD,YAAnB,CADkD,CAElD;;AACA,iBAAKxC,QAAL,CAAcsC,YAAd,CAA2B,KAAK1F,MAAL,CAAY8F,GAAZ,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAA3B,EAA0D,EAA1D;AACA,iBAAKvB,cAAL;AACD;;;iBAED,4BAAmB;AACjB,iBAAKqB,WAAL,GAAmB,IAAnB;AACD;;;iBAED,2BAAkB;AAAA;;AAChB,iBAAKG,gBAAL;AACA,iBAAK/C,WAAL,CAAiBgD,eAAjB,CAAiC,KAAKzC,SAAL,CAAe0C,KAAf,CAAqB,OAArB,CAAjC,EAAgE,KAAK1C,SAAL,CAAe0C,KAAf,CAAqB,UAArB,CAAhE,EACChB,IADD,CACM,UAAArF,IAAI,EAAI;AACZ;AACA,oBAAI,CAACsE,+BAAL;AACD,aAJD,WAKO,UAAAF,KAAK,EAAI;AACd,oBAAI,CAAC4B,WAAL,GAAmB5B,KAAK,CAACV,OAAzB;;AACA,oBAAI,CAACiB,cAAL;AACD,aARD;AASD;;;iBAED,2BAAe;AAAA;;AACb,iBAAKwB,gBAAL;AACA,iBAAKG,sCAAL,CAA4C,UAA5C;AAEA,iBAAKlD,WAAL,CAAiBmD,kBAAjB,GACCrC,SADD,CACW,UAACC,MAAD,EAAY;AACrB;AACA;AACA,oBAAI,CAACG,+BAAL;AACD,aALD,EAKG,UAACF,KAAD,EAAW;AACZ,oBAAI,CAACC,6BAAL,CAAmCD,KAAK,CAACV,OAAzC;AACD,aAPD;AAQD;;;iBAED,yBAAa;AAAA;;AACX,iBAAKyC,gBAAL;AACA,iBAAKG,sCAAL,CAA4C,QAA5C;AAEA,iBAAKlD,WAAL,CAAiBoD,gBAAjB,GACCtC,SADD,CACW,UAACC,MAAD,EAAY;AACrB;AACA;AACA,oBAAI,CAACG,+BAAL;AACD,aALD,EAKG,UAACF,KAAD,EAAW;AACVqC,qBAAO,CAACC,GAAR,CAAYtC,KAAZ;;AACF,oBAAI,CAACC,6BAAL,CAAmCD,KAAK,CAACV,OAAzC;AACD,aARD;AASD;;;iBAED,0BAAc;AAAA;;AACZ,iBAAKyC,gBAAL;AACA,iBAAKG,sCAAL,CAA4C,SAA5C;AAEA,iBAAKlD,WAAL,CAAiBuD,iBAAjB,GACCzC,SADD,CACW,UAACC,MAAD,EAAY;AAErB;AACA;AACA,oBAAI,CAACG,+BAAL;AACD,aAND,EAMG,UAACF,KAAD,EAAW;AACZqC,qBAAO,CAACC,GAAR,CAAYtC,KAAZ;;AACA,oBAAI,CAACC,6BAAL,CAAmCD,KAAK,CAACV,OAAzC;AACD,aATD;AAUD;;;;;;;yBA9KUR,kB,EAAkB,uH,EAAA,+H,EAAA,2I,EAAA,qH,EAAA,iI,EAAA,yH,EAAA,mJ;AAAA,O;;;cAAlBA,kB;AAAkB,6C;AAAA,iB;AAAA,e;AAAA,6lC;AAAA;AAAA;ADjB/B;;AACE;;AACE;;AACE;;AACF;;AACF;;AACF;;AAEA;;AACE;;AACE;;AACA;;AACF;;AACA;;AAA8B;AAAA,qBAAY,IAAAkD,eAAA,EAAZ;AAA6B,aAA7B;;AAC5B;;AACE;;AACE;;AACF;;AACA;;AACE;;AAMF;;AAEA;;AACE;;AACE;;AACF;;AACF;;AACA;;AACE;;AAMF;;AACF;;AAEA;;AAAyF;;AAAM;;AAC/F;;AAMA;;AACE;;AACE;;AACF;;AACF;;AACF;;AAEA;;AACE;;AAA2B;;AAAE;;AAC7B;;AAAsF;AAAA,qBAAS,IAAAQ,eAAA,EAAT;AAA0B,aAA1B;;AAA4B;;AAAoB;;AACtI;;AAAkF;AAAA,qBAAS,IAAAC,aAAA,EAAT;AAAwB,aAAxB;;AAA0B;;AAAkB;;AAC9H;;AAAoF;AAAA,qBAAS,IAAAC,cAAA,EAAT;AAAyB,aAAzB;;AAA2B;;AAAmB;;AACpI;;AACF;;;;AAjDQ;;AAAA;;AAMqC;;AAAA;;AAcA;;AAAA;;AASkB;;AAAA;;AAC7B;;AAAA;;AAOgB;;AAAA","file":"default~pages-onboarding-onboarding-module~sign-in-firebase-sign-in-module-es5.js","sourcesContent":["import { Injectable, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { AngularFireAuth } from '@angular/fire/auth';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: auth-guard.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nimport * as ɵngcc2 from '@angular/fire/auth';\nconst ɵ0 = /**\n * @param {?} user\n * @return {?}\n */\nuser => !!user;\n/** @type {?} */\nconst loggedIn = map((ɵ0));\nclass AngularFireAuthGuard {\n    /**\n     * @param {?} router\n     * @param {?} auth\n     */\n    constructor(router, auth) {\n        this.router = router;\n        this.auth = auth;\n        this.canActivate = (/**\n         * @param {?} next\n         * @param {?} state\n         * @return {?}\n         */\n        (next, state) => {\n            /** @type {?} */\n            const authPipeFactory = (/** @type {?} */ (next.data.authGuardPipe)) || ((/**\n             * @return {?}\n             */\n            () => loggedIn));\n            return this.auth.user.pipe(take(1), authPipeFactory(next, state), map((/**\n             * @param {?} can\n             * @return {?}\n             */\n            can => {\n                if (typeof can === 'boolean') {\n                    return can;\n                }\n                else if (Array.isArray(can)) {\n                    return this.router.createUrlTree(can);\n                }\n                else {\n                    // TODO(EdricChan03): Add tests\n                    return this.router.parseUrl(can);\n                }\n            })));\n        });\n    }\n}\nAngularFireAuthGuard.ɵfac = function AngularFireAuthGuard_Factory(t) { return new (t || AngularFireAuthGuard)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc2.AngularFireAuth)); };\n/** @nocollapse */\nAngularFireAuthGuard.ctorParameters = () => [\n    { type: Router },\n    { type: AngularFireAuth }\n];\n/** @nocollapse */ AngularFireAuthGuard.ɵprov = ɵɵdefineInjectable({ factory: function AngularFireAuthGuard_Factory() { return new AngularFireAuthGuard(ɵɵinject(Router), ɵɵinject(AngularFireAuth)); }, token: AngularFireAuthGuard, providedIn: \"any\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularFireAuthGuard, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'any'\n            }]\n    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc2.AngularFireAuth }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    AngularFireAuthGuard.prototype.canActivate;\n    /**\n     * @type {?}\n     * @private\n     */\n    AngularFireAuthGuard.prototype.router;\n    /**\n     * @type {?}\n     * @private\n     */\n    AngularFireAuthGuard.prototype.auth;\n}\n/** @type {?} */\nconst canActivate = (/**\n * @param {?} pipe\n * @return {?}\n */\n(pipe) => ({\n    canActivate: [AngularFireAuthGuard], data: { authGuardPipe: pipe }\n}));\nconst ɵ1 = /**\n * @param {?} user\n * @return {?}\n */\nuser => !!user && !user.isAnonymous;\n/** @type {?} */\nconst isNotAnonymous = map((ɵ1));\nconst ɵ2 = /**\n * @param {?} user\n * @return {?}\n */\n(user) => user ? user.getIdTokenResult() : of(null);\n/** @type {?} */\nconst idTokenResult = switchMap((ɵ2));\nconst ɵ3 = /**\n * @param {?} user\n * @return {?}\n */\nuser => !!user && user.emailVerified;\n/** @type {?} */\nconst emailVerified = map((ɵ3));\nconst ɵ4 = /**\n * @param {?} idTokenResult\n * @return {?}\n */\nidTokenResult => idTokenResult ? idTokenResult.claims : [];\n/** @type {?} */\nconst customClaims = pipe(idTokenResult, map((ɵ4)));\n/** @type {?} */\nconst hasCustomClaim = (/**\n * @param {?} claim\n * @return {?}\n */\n(claim) => pipe(customClaims, map((/**\n * @param {?} claims\n * @return {?}\n */\nclaims => claims.hasOwnProperty(claim)))));\n/** @type {?} */\nconst redirectUnauthorizedTo = (/**\n * @param {?} redirect\n * @return {?}\n */\n(redirect) => pipe(loggedIn, map((/**\n * @param {?} loggedIn\n * @return {?}\n */\nloggedIn => loggedIn || redirect))));\n/** @type {?} */\nconst redirectLoggedInTo = (/**\n * @param {?} redirect\n * @return {?}\n */\n(redirect) => pipe(loggedIn, map((/**\n * @param {?} loggedIn\n * @return {?}\n */\nloggedIn => loggedIn && redirect || true))));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: auth-guard.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AngularFireAuthGuardModule {\n}\nAngularFireAuthGuardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFireAuthGuardModule });\nAngularFireAuthGuardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFireAuthGuardModule_Factory(t) { return new (t || AngularFireAuthGuardModule)(); }, providers: [AngularFireAuthGuard] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularFireAuthGuardModule, [{\n        type: NgModule,\n        args: [{\n                providers: [AngularFireAuthGuard]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-fire-auth-guard.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AngularFireAuthGuard, AngularFireAuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo };\n\n//# sourceMappingURL=angular-fire-auth-guard.js.map","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"app/categories\"></ion-back-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"login-content\">\n  <h2 class=\"auth-title\">\n    Sign In with Firebase\n    <br/>\n  </h2>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"signInWithEmail()\">\n    <ion-list class=\"inputs-list\" lines=\"full\">\n      <ion-item class=\"input-item\">\n        <ion-input type=\"email\" placeholder=\"Email\" formControlName=\"email\" clearInput autocapitalize=\"off\" inputmode=\"email\"></ion-input>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.email\">\n          <div class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n\n      <ion-item class=\"input-item\">\n        <app-show-hide-password>\n          <ion-input type=\"password\" placeholder=\"Password\" formControlName=\"password\"></ion-input>\n        </app-show-hide-password>\n      </ion-item>\n      <div class=\"error-container\">\n        <ng-container *ngFor=\"let validation of validation_messages.password\">\n          <div class=\"error-message\" *ngIf=\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon>\n            <span>{{ validation.message }}</span>\n          </div>\n        </ng-container>\n      </div>\n    </ion-list>\n\n    <ion-button class=\"login-btn\" type=\"submit\" expand=\"block\" [disabled]=\"!loginForm.valid\">Log In</ion-button>\n    <div class=\"error-container\" *ngIf=\"submitError\">\n      <div class=\"error-message\">\n        <ion-icon name=\"information-circle-outline\"></ion-icon>\n        <span>{{ submitError }}</span>\n      </div>\n    </div>\n    <ion-row class=\"other-auth-options-row\">\n      <ion-button class=\"signup-btn\" fill=\"clear\" [routerLink]=\"['/firebase/auth/sign-up']\">\n        Sign Up!\n      </ion-button>\n    </ion-row>\n  </form>\n\n  <div class=\"social-auth-options\">\n    <p class=\"options-divider\">Or</p>\n    <ion-button class=\"social-auth-btn facebook-auth-btn\" expand=\"block\" color=\"facebook\" (click)=\"doFacebookLogin()\">Log In with Facebook</ion-button>\n    <ion-button class=\"social-auth-btn google-auth-btn\" expand=\"block\" color=\"google\" (click)=\"doGoogleLogin()\">Log In with Google</ion-button>\n    <ion-button class=\"social-auth-btn twitter-auth-btn\" expand=\"block\" color=\"twitter\" (click)=\"doTwitterLogin()\">Log In with Twitter</ion-button>\n  </div>\n</ion-content>\n","import { Component, NgZone, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { LoadingController } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\n\nimport { HistoryHelperService } from '../../../utils/history-helper.service';\nimport { FirebaseAuthService } from '../firebase-auth.service';\n\n@Component({\n  selector: 'app-firebase-sign-in',\n  templateUrl: './firebase-sign-in.page.html',\n  styleUrls: [\n    './styles/firebase-sign-in.page.scss'\n  ]\n})\nexport class FirebaseSignInPage implements OnDestroy {\n  loginForm: FormGroup;\n  submitError: string;\n  redirectLoader: HTMLIonLoadingElement;\n  authRedirectResult: Subscription;\n\n  validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\n    ]\n  };\n\n  constructor(\n    public router: Router,\n    public route: ActivatedRoute,\n    public authService: FirebaseAuthService,\n    private ngZone: NgZone,\n    public loadingController: LoadingController,\n    public location: Location,\n    public historyHelper: HistoryHelperService\n  ) {\n    this.loginForm = new FormGroup({\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      'password': new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ]))\n    });\n    // Get firebase authentication redirect result invoken when using signInWithRedirect()\n    // signInWithRedirect() is only used when client is in web but not desktop\n    this.authRedirectResult = this.authService.getRedirectResult()\n    .subscribe(result => {\n      if (result.error) {\n        this.manageAuthWithProvidersErrors(result.error);\n      } else {\n        this.redirectLoggedUserToProfilePage();\n      }\n  });\n\n    // Check if url contains our custom 'auth-redirect' param, then show a loader while we receive the getRedirectResult notification\n    this.route.queryParams.subscribe(params => {\n      const authProvider = params['auth-redirect'];\n      if (authProvider) {\n        this.presentLoading(authProvider);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.dismissLoading();\n  }\n\n  // Once the auth provider finished the authentication flow, and the auth redirect completes,\n  // hide the loader and redirect the user to the profile page\n  redirectLoggedUserToProfilePage() {\n    this.dismissLoading();\n    // As we are calling the Angular router navigation inside a subscribe method, the navigation will be triggered outside Angular zone.\n    // That's why we need to wrap the router navigation call inside an ngZone wrapper\n    this.ngZone.run(() => {\n      // Get previous URL from our custom History Helper\n      // If there's no previous page, then redirect to profile\n      // const previousUrl = this.historyHelper.previousUrl || 'firebase/auth/profile';\n      const previousUrl = 'home';\n\n      // No need to store in the navigation history the sign-in page with redirect params (it's justa a mandatory mid-step)\n      // Navigate to profile and replace current url with profile\n      this.router.navigate([previousUrl], { replaceUrl: true });\n    });\n  }\n\n  async presentLoading(authProvider?: string) {\n    const authProviderCapitalized = authProvider[0].toUpperCase() + authProvider.slice(1);\n\n    this.loadingController.create({\n      message: authProvider ? 'Signing in with ' + authProviderCapitalized : 'Signin in ...',\n      duration: 4000\n    }).then((loader) => {\n      const currentUrl = this.location.path();\n      if (currentUrl.includes('auth-redirect')) {\n        this.redirectLoader = loader;\n        this.redirectLoader.present();\n      }\n    });\n  }\n\n  async dismissLoading() {\n    if (this.redirectLoader) {\n      await this.redirectLoader.dismiss();\n    }\n  }\n\n  // Before invoking auth provider redirect flow, present a loading indicator and add a flag to the path.\n  // The precense of the flag in the path indicates we should wait for the auth redirect to complete.\n  prepareForAuthWithProvidersRedirection(authProvider: string) {\n    this.presentLoading(authProvider);\n\n    this.location.replaceState(this.location.path(), 'auth-redirect=' + authProvider, this.location.getState());\n  }\n\n  manageAuthWithProvidersErrors(errorMessage: string) {\n    this.submitError = errorMessage;\n    // remove auth-redirect param from url\n    this.location.replaceState(this.router.url.split('?')[0], '');\n    this.dismissLoading();\n  }\n\n  resetSubmitError() {\n    this.submitError = null;\n  }\n\n  signInWithEmail() {\n    this.resetSubmitError();\n    this.authService.signInWithEmail(this.loginForm.value['email'], this.loginForm.value['password'])\n    .then(user => {\n      // navigate to user profile\n      this.redirectLoggedUserToProfilePage();\n    })\n    .catch(error => {\n      this.submitError = error.message;\n      this.dismissLoading();\n    });\n  }\n\n  doFacebookLogin(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('facebook');\n\n    this.authService.signInWithFacebook()\n    .subscribe((result) => {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      // const token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  doGoogleLogin(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('google');\n\n    this.authService.signInWithGoogle()\n    .subscribe((result) => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      // var token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n        console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n\n  doTwitterLogin(): void {\n    this.resetSubmitError();\n    this.prepareForAuthWithProvidersRedirection('twitter');\n\n    this.authService.signInWithTwitter()\n    .subscribe((result) => {\n\n      // This gives you a Twitter Access Token. You can use it to access the Twitter API.\n      // var token = result.credential.accessToken;\n      this.redirectLoggedUserToProfilePage();\n    }, (error) => {\n      console.log(error);\n      this.manageAuthWithProvidersErrors(error.message);\n    });\n  }\n}\n"]}